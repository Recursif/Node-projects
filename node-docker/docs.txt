
# Docs 


## .dockerignore file

This will prevent your local modules
and debug logs from being copied onto
your Docker image and possibly
overwriting modules installed
within your image.


## Building your image

Go to the directory that has your Dockerfile
and run the following command to build
the Docker image.

The -t flag lets you tag your image
so it's easier to find later using
the docker images command:

docker build -t <your username>/node-web-app .

Your image will now be listed by Docker:

$ docker images


## Run the image

Running your image with -d runs the container in detached mode, leaving the container running in the background. The -p flag redirects a public port to a private port inside the container. Run the image you previously built:

$ docker run -p 49160:8080 -d <your username>/node-web-app

# Get container ID
$ docker ps


# Print app output
$ docker logs <container id>


If you need to go inside the container you can use the exec command:

# Enter the container
$ docker exec -it <container id> /bin/bash


In the example above, Docker mapped
the 8080 port inside of the container
to the port 49160 on your machine.

Now you can call your app using curl
(install if needed via: sudo apt-get install curl):

$ curl -i localhost:49160


