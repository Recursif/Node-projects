
# Process.env

The process.env global variable is injected by Node at runtime for
your application to use it represents the state of the system
environnment your application is in when it starts.
For example, if the system has a PATH variable set, this will
be made accessible to you through process.env.PATH which you
can use to check where binaries are located and make external
calls to them id required.

## Why environment is important

An application needs to be deployed in order
for it to be useful, anf this can be anything from code that creates a simple
website to complex APIs that engage in intensice computations.
Ultimately, if an application is not deployed, no one can
use it and it serves no purpose.

const connection = new Connection(process.env.DB_CONNECTION_STRING);


## How to use it

The act of providing environment variables is referred to as provisioning.

We have two levels to work with when dealing with server provisioning:
infra and app levels.


A common application level tool is dotenv which allows us to load environment variables
from a file named .env

While this is convenient for development needs,
it is considered bad practice to couple an environment with your application,
so keep it out by adding .env to your .gitignore file.


At the infrastructure level, we can use deployment manager tools like PM2,
Docker Compose an Kubernetes to specify the environment.

PM2 uses an ecosystem.yaml file where you can specify the environment
using the env property:

apps:
  - script: ./app.js
    name: 'my_application'
    env:
      NODE_ENV: development
    env_production:
      NODE_ENV: production

Docker Compose likewise allows for an environment property
to be specified in a service manifest

## When to use it

Application configuratikons

Application configurations do not affect the logical behaviour of the application.


Using process.env.* correctly results in applications that can be tested with ease and deployed/scaled elegantly.
