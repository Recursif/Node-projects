

# GraphQL

Describe your data 

type Project {
  name: String
  tagline: String
  contributors: [User]
}

Ask for what you want
{
  project(name: "GraphQL") {
    tagline
  }
}

Get predictable results
{
  "project": {
    "tagline": "A query language for APIs"
  }
}

## A query language for your API

GraphqQL is a query language for APIs and a runtime for 
fulfilling those queries with your existing data.

GraphQL provides a complete and understandable description of the data in your API,
gives clients the power to ask for exactly what they need and 
nothing more, makes it easier to evolve APIs over time,
and enables powerful developer tools.


## Ask for what you need, get exactly that

Send a GraphQL query to your API and get exactly
what you need, nothing more and nothing less.
GraphQL queries always return predictable results.

Apps using GraphQL are fast stable because thay control the data they get,
not the server.

{
  hero {
    name
    height
 
  }
}
{
  "hero": {
    "name": "Luke Skywalker",
    "height": 1.72
  }
}


## Get many resources in a single request 

GraphQL queries access not just the properties of 
one ressource but also smoothly follow references between them.

While typical REST APIs require loading from multiple URLs,
GraphQL APIs get all the 
data your app needs in a single request.
Apps using GraphQL can be quick even on slow mobile networks connections.


## Describe what's possible with a type system

GraphQL APIs are organized in terms of types and fields, 
not endpoints.

Access the full capabilities of your data from a single endpoint.

GraphQL uses types to secure Apps only ask for what's possible 
and provide clear and helpful errors. 

Apps can use types to avoid writing manual parsing code.


## Move faster with powerful developer tools 

Know exactly what data you can request from your API 
without leaving your editor,
highlight potential issues before sending a query, 
and take advantage of improved code intelligence.
GraphQL makes it easy to build powerful tools like GraphQL 
by leveraging your API's type system.


## Evolve your API without versions 

Add new fields and types to your GraphQL API
without impacting existing queries.
aging fields can be deprecated and hidden from tools.
By using a single evolving version, GraphQL APIs give apps continuous access to new 
features and encourage cleaner, more maintainable server code.


## Bring your own data and code 

GraphQL creates a uniform API across your entire 
application without being limited by a specific 
storage engine.

Write GraphQL APIs that leverage your existing data 
and code with GraphQL engines available in many 
languages.

You provide functions for each field in type system,
and GraphQL calls them with optimal concurrency.




